{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","json","localStorage","getItem","useState","data","setData","value","setValue","JSON","parse","collected","setCollected","classes","makeStyles","theme","root","flexGrow","mainContent","marginTop","spacing","paper","padding","textAlign","color","palette","text","secondary","menuButton","marginRight","title","row","marginBottom","useStyles","useEffect","length","fetch","then","x","Container","className","AppBar","position","container","Toolbar","IconButton","edge","aria-label","Typography","variant","onClick","Box","display","alignItems","justifyContent","height","status","map","Grid","key","id","item","xs","name","datetime","style","Link","component","setItem","stringify","console","log","target","href","url","Button","size","button","startIcon","endIcon","Divider","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbe7ed43.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport {Grid, Button, makeStyles, Link, Container, Box} from \"@material-ui/core\";\r\nimport Progress from \"@material-ui/core/CircularProgress\"\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ArrowRight from '@material-ui/icons/ArrowRightAlt';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CheckIcon from '@material-ui/icons/Check'\r\n// or\r\nfunction App() {\r\n  const json = localStorage.getItem(\"COLLECTED\") || \"{}\";\r\n  const [data, setData] = useState([]);\r\n  const [value, setValue] = useState([]);\r\n  const [collected, setCollected] = useState(JSON.parse(json));\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    mainContent: {\r\n      marginTop: theme.spacing(2)\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(1),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    marginTop: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    row: {\r\n      marginBottom: theme.spacing(1)\r\n    }\r\n  }));\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    if(data.length > 0) return;\r\n\r\n    fetch(\"https://cm-spin.herokuapp.com/\").then(x =>x.json()).then(data => setData(data));\r\n  });\r\n  return (\r\n    <Container className=\"App\">\r\n      <AppBar position=\"static\" container=\"true\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Coin Master Daily Rewards\r\n          </Typography>\r\n          <IconButton color=\"inherit\" onClick={() => {\r\n             setData([]);\r\n             fetch(\"https://cm-spin.herokuapp.com/\").then(x =>x.json()).then(data => setData(data));\r\n          }} ><RefreshIcon/></IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container className={classes.mainContent}>\r\n      \r\n\r\n     { data.length ===0 && <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height =\"75vmin\"><Progress  variant=\"indeterminate\" status=\"loading....\"></Progress></Box>}\r\n      {data.map(x => (\r\n      <Grid container spacing={0} className={classes.row} key={x.id}>\r\n        <Grid item xs={5}>\r\n          <Typography className={classes.paper}>{x.name}</Typography>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Typography className={classes.paper}>{x.datetime}</Typography>\r\n        </Grid>\r\n        <Grid item xs={4} style= {{textAlign: \"right\"}}  >\r\n          <Link component=\"a\" \r\n            onClick={() => {\r\n              collected[x.id] = true;\r\n              setCollected(collected);\r\n              localStorage.setItem(\"COLLECTED\", JSON.stringify(collected));\r\n              console.log(collected);\r\n\r\n              return false;\r\n            }}\r\n          target=\"_blank\" color=\"primary\" href={x.url}>\r\n          <Button spacing={2}\r\n              variant=\"contained\"\r\n              color={collected[x.id]? \"primary\": \"secondary\"}\r\n              size=\"small\"\r\n              className={classes.button}\r\n              startIcon={collected[x.id]?<CheckIcon />: null}\r\n              endIcon={!collected[x.id]?<ArrowRight />: null}\r\n            >Collect</Button>\r\n        </Link>\r\n        </Grid>\r\n        <Grid xs={12} item>\r\n        <Divider component=\"hr\"></Divider>\r\n\r\n        </Grid>\r\n      </Grid>))}\r\n      </Container>\r\n      <Divider component=\"hr\"></Divider>\r\n      {data.length >0 && ( <BottomNavigation className={classes.marginTop}\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          setValue(newValue);\r\n          setData([]);\r\n          fetch(\"https://cm-spin.herokuapp.com/\").then(x =>x.json()).then(data => setData(data));\r\n        }}\r\n        showLabels\r\n      >\r\n        <BottomNavigationAction label=\"Refresh\" icon={<RefreshIcon />} />\r\n      </BottomNavigation>)}\r\n    </Container>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}