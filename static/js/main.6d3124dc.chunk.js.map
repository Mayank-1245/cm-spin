{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","value","setValue","classes","makeStyles","theme","root","flexGrow","mainContent","marginTop","spacing","paper","padding","textAlign","color","palette","text","secondary","menuButton","marginRight","title","row","marginBottom","useStyles","useEffect","length","fetch","then","x","json","Container","className","AppBar","position","container","Toolbar","IconButton","edge","aria-label","Typography","variant","onClick","map","Grid","item","xs","name","datetime","Link","component","target","href","url","Button","size","button","endIcon","Divider","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sZA+GeA,MAhGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KA4BPC,EAzBYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,YAAa,CACXC,UAAWJ,EAAMK,QAAQ,IAE3BC,MAAO,CACLC,QAASP,EAAMK,QAAQ,GACvBG,UAAW,SACXC,MAAOT,EAAMU,QAAQC,KAAKC,WAE5BC,WAAY,CACVC,YAAad,EAAMK,QAAQ,IAE7BU,MAAO,CACLb,SAAU,GAEZE,UAAW,CACTA,UAAWJ,EAAMK,QAAQ,IAE3BW,IAAK,CACHC,aAAcjB,EAAMK,QAAQ,OAGhBa,GAMhB,OALAC,qBAAU,WACLzB,EAAK0B,OAAS,GAEjBC,MAAM,kCAAkCC,MAAK,SAAAC,GAAC,OAAGA,EAAEC,UAAQF,MAAK,SAAA5B,GAAI,OAAIC,EAAQD,SAGhF,kBAAC+B,EAAA,EAAD,CAAWC,UAAU,OACnB,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,WAAS,GACjC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,UAAW5B,EAAQe,WAAYJ,MAAM,UAAUwB,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAW5B,EAAQiB,OAA5C,6BAGA,kBAACgB,EAAA,EAAD,CAAYtB,MAAM,UAAU2B,QAAS,WAClCzC,EAAQ,IACR0B,MAAM,kCAAkCC,MAAK,SAAAC,GAAC,OAAGA,EAAEC,UAAQF,MAAK,SAAA5B,GAAI,OAAIC,EAAQD,QAC/E,kBAAC,IAAD,SAGR,kBAAC+B,EAAA,EAAD,CAAWC,UAAW5B,EAAQK,aAGd,IAAfT,EAAK0B,QAAgB,kBAAC,IAAD,CAAUe,QAAQ,gBAAgB9B,QAAS,GAAIwB,WAAS,IAC7EnC,EAAK2C,KAAI,SAAAd,GAAC,OACX,kBAACe,EAAA,EAAD,CAAMT,WAAS,EAACxB,QAAS,EAAGqB,UAAW5B,EAAQkB,KAC7C,kBAACsB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAACN,EAAA,EAAD,CAAYR,UAAW5B,EAAQQ,OAAQiB,EAAEkB,OAE3C,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAACN,EAAA,EAAD,CAAYR,UAAW5B,EAAQQ,OAAQiB,EAAEmB,WAE3C,kBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAACG,EAAA,EAAD,CAAOC,UAAU,IAAIT,QAAQ,YAAaU,OAAO,SAASpC,MAAM,UAAUqC,KAAMvB,EAAEwB,KAClF,kBAACC,EAAA,EAAD,CAAQ3C,QAAS,EACb8B,QAAQ,YACR1B,MAAM,UACNwC,KAAK,QACLvB,UAAW5B,EAAQoD,OACnBC,QAAS,kBAAC,IAAD,OALb,aASF,kBAACb,EAAA,EAAD,CAAME,GAAI,GAAInC,QAAS,GACvB,kBAAC+C,EAAA,EAAD,CAASR,UAAU,aAKrB,kBAACQ,EAAA,EAAD,CAASR,UAAU,OAClBlD,EAAK0B,OAAQ,GAAO,kBAACiC,EAAA,EAAD,CAAkB3B,UAAW5B,EAAQM,UACxDR,MAAOA,EACP0D,SAAU,SAACC,EAAOC,GAChB3D,EAAS2D,GACT7D,EAAQ,IACR0B,MAAM,kCAAkCC,MAAK,SAAAC,GAAC,OAAGA,EAAEC,UAAQF,MAAK,SAAA5B,GAAI,OAAIC,EAAQD,OAElF+D,YAAU,GAEV,kBAACC,EAAA,EAAD,CAAwBC,MAAM,UAAUC,KAAM,kBAAC,IAAD,WC5FlCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.6d3124dc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {Grid, Button, makeStyles, Link, Container} from \"@material-ui/core\";\nimport Progress from \"@material-ui/core/CircularProgress\"\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowRight from '@material-ui/icons/ArrowRightAlt';\nimport Divider from '@material-ui/core/Divider';\n// or\nfunction App() {\n  const [data, setData] = useState([]);\n  const [value, setValue] = useState([]);\n  const useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n    },\n    mainContent: {\n      marginTop: theme.spacing(2)\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    marginTop: {\n      marginTop: theme.spacing(2),\n    },\n    row: {\n      marginBottom: theme.spacing(1)\n    }\n  }));\n  const classes = useStyles();\n  useEffect(() => {\n    if(data.length > 0) return;\n\n    fetch(\"https://cm-spin.herokuapp.com/\").then(x =>x.json()).then(data => setData(data));\n  });\n  return (\n    <Container className=\"App\">\n      <AppBar position=\"static\" container>\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Coin Master Daily Rewards\n          </Typography>\n          <IconButton color=\"inherit\" onClick={() => {\n             setData([]);\n             fetch(\"https://cm-spin.herokuapp.com/\").then(x =>x.json()).then(data => setData(data));\n          }} ><RefreshIcon/></IconButton>\n        </Toolbar>\n      </AppBar>\n      <Container className={classes.mainContent}>\n      \n\n     { data.length ===0  && <Progress variant=\"indeterminate\" spacing={20} container ></Progress>}\n      {data.map(x => (\n      <Grid container spacing={0} className={classes.row}>\n        <Grid item xs={5}>\n          <Typography className={classes.paper}>{x.name}</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography className={classes.paper}>{x.datetime}</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Link  component=\"a\" variant=\"contained\"  target=\"_blank\" color=\"primary\" href={x.url}>\n          <Button spacing={2}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              className={classes.button}\n              endIcon={<ArrowRight />}\n            >Collect</Button>\n        </Link>\n        </Grid>\n        <Grid xs={12} spacing={3}>\n        <Divider component=\"hr\"></Divider>\n\n        </Grid>\n      </Grid>))}\n      </Container>\n      <Divider component=\"hr\"></Divider>\n      {data.length >0 && ( <BottomNavigation className={classes.marginTop}\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n          setData([]);\n          fetch(\"https://cm-spin.herokuapp.com/\").then(x =>x.json()).then(data => setData(data));\n        }}\n        showLabels\n      >\n        <BottomNavigationAction label=\"Refresh\" icon={<RefreshIcon />} />\n      </BottomNavigation>)}\n    </Container>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}